buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'application'
apply plugin: 'com.moowork.node'

group 'smarthome'
version '0.0.4'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

distZip {
    into("$project.name-$project.version/bin") {
        from '.'
        include 'smarthome.service', 'config.json'
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"
    compile "io.ktor:ktor-websockets:$ktor_version"
    compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0"
    compile 'com.jayway.jsonpath:json-path:2.4.0'
    compile 'io.github.microutils:kotlin-logging:1.6.24'

    compile 'org.postgresql:postgresql:42.2.5'
    compile 'com.zaxxer:HikariCP:3.3.1'
    compile 'com.github.mjdbc:mjdbc:1.3.1'

    compile "org.koin:koin-core:1.0.2"
    compile "org.koin:koin-core-ext:1.0.2"
    compile 'org.koin:koin-ktor:2.0.1'

    compile 'com.uchuhimo:konf:0.13.2'

    testCompile "io.ktor:ktor-server-tests:$ktor_version"
}

node {
    nodeModulesDir = file("${project.projectDir}/frontend")
}

task installFrontentDeps(type: YarnTask){
    args = ['install', '--production']
}
task compileFrontEnd(type : YarnTask) {
    args = ['build']
}
compileFrontEnd.dependsOn(installFrontentDeps)
processResources.dependsOn(compileFrontEnd)